{"version":3,"sources":["helper/apicall.js","InfoBox.js","helper/util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["getCovidData","country","url","fetch","then","response","json","catch","err","console","log","fetchLastData","a","InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","attribution","data","map","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","setData","useEffect","chartData","lastDataPoint","date","newDataPoint","x","y","push","buildChartData","length","datasets","backgroundColor","borderColor","App","setInputCountry","setCountries","setCountryInfo","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","sortedData","sort","b","sortData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bca49d87.chunk.js","sourcesContent":["export const getCountriesData = () => {\r\n  return fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n    .then((response) => response.json())\r\n    .catch((err) => console.log(\"Can't fetch all countries due to err:\", err));\r\n};\r\n\r\nexport const getCovidData = (country) => {\r\n  const url =\r\n    country === \"worldwide\"\r\n      ? \"https://disease.sh/v3/covid-19/all\"\r\n      : `https://disease.sh/v3/covid-19/countries/${country}`;\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .catch((err) => console.log(\"Can't fetch covid data due to err:\", err));\r\n};\r\n\r\nexport const fetchLastData = async () => {\r\n  return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .catch((err) =>\r\n      console.log(\"Can't fetch last 120 days covid data due to err:\", err)\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox_cases ${!isRed && \"infoBox_cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n          Total {total}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 500,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 725,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 1000,\r\n  },\r\n};\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n  return sortedData;\r\n};\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./helper/util\";\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport { fetchLastData } from \"./helper/apicall\";\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchLastData().then((data) => {\r\n      let chartData = buildChartData(data, casesType);\r\n      setData(chartData);\r\n    });\r\n  }, [casesType]);\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\nimport { getCountriesData, getCovidData } from \"./helper/apicall\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./helper/util\";\nimport LineGraph from \"./LineGraph\";\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countries, setCountries] = useState([]);\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  useEffect(() => {\n    getCovidData(\"worldwide\").then((data) => {\n      setCountryInfo(data);\n    });\n    getCountriesData().then((data) => {\n      const countries = data.map((country) => ({\n        name: country.country,\n        value: country.countryInfo.iso2,\n      }));\n\n      let sortedData = sortData(data);\n      setCountries(countries);\n      setMapCountries(data);\n      setTableData(sortedData);\n    });\n  }, []);\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    await getCovidData(countryCode).then((data) => {\n      setInputCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <div className=\"app_information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph className=\"app_graph\" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}